package com.jpan.mbundle.extractor;
 
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
 
public class MBundleExtractor {
 
    //ARG1 = input bundle, Arg2 = output folder
    public static void main(String[] args) throws IOException {
        File in = new File(args[0]);
        File outDir = new File(args[1]);
        if(!outDir.exists())
            outDir.mkdir();
        
        if(!in.exists()) {
            System.out.println("Invalid input file");
            return;
        }
        
        FileInputStream inputStream = new FileInputStream(in);
        
        StringBuilder strBuild = new StringBuilder();
        for(int i = 0; i < 8; i++) {
            strBuild.append((char)inputStream.read());  
        }
        if(!strBuild.toString().equals("bplist00"))
        {
            System.out.println("Wrong file header");
            return;
        }
        long total = 8;
        
        inputStream.skip(in.length()- 24);
        long tableAddress = ((long)(inputStream.read())<<0x38L) + ((long)(inputStream.read())<<0x30L) +((long)(inputStream.read())<<0x28L)+((long)(inputStream.read())<<0x20L)+
                ((long)(inputStream.read())<<0x18L)+((long)(inputStream.read())<<0x10L)+((long)(inputStream.read())<<0x8L)+((long)(inputStream.read())) +14/*Table header*/;
        long contentAddress = ((long)(inputStream.read())<<0x38L) + ((long)(inputStream.read())<<0x30L) +((long)(inputStream.read())<<0x28L)+((long)(inputStream.read())<<0x20L)+
                ((long)(inputStream.read())<<0x18L)+((long)(inputStream.read())<<0x10L)+((long)(inputStream.read())<<0x8L)+((long)(inputStream.read()));
        
        System.out.println("Tables at " + Long.toHexString(tableAddress) +" and " +Long.toHexString(contentAddress));
        
        inputStream.close();
        inputStream = new FileInputStream(in);
        ArrayList<Long> indexTable = new ArrayList<>();
        inputStream.skip(tableAddress);
        while(tableAddress < contentAddress) {
            indexTable.add(((long)(inputStream.read())<<0x18L)+((long)(inputStream.read())<<0x10L)+((long)(inputStream.read())<<0x8L)+((long)(inputStream.read())));
            tableAddress += 4;
        }
        //inputStream.skip(contentAddress);
        ArrayList<NameToContent> ans = new ArrayList<NameToContent>();
        
        int k = 0;
        while(!indexTable.isEmpty()) {
            NameToContent n = new NameToContent();
            inputStream.getChannel().position(contentAddress + indexTable.get(0)*8);
            n.nameAddr = ((long)(inputStream.read())<<0x38L) + ((long)(inputStream.read())<<0x30L) +((long)(inputStream.read())<<0x28L)+((long)(inputStream.read())<<0x20L)+
                    ((long)(inputStream.read())<<0x18L)+((long)(inputStream.read())<<0x10L)+((long)(inputStream.read())<<0x8L)+((long)(inputStream.read()));
            int b = n.findName(inputStream);
            if(b == 0x5f) {
                ans.add(n);
            }else {
                ans.get(k).readFromInputIntoFile(b, inputStream, outDir);
                k++;
            }
            
            indexTable.remove((int)0);
        }
        inputStream.close();
        return;
    }
    
    private static class NameToContent {
        String name;
        long addr;
        long nameAddr;
        
        int findName(FileInputStream inputStream) throws IOException {
            inputStream.getChannel().position(nameAddr);
            int b = inputStream.read();
            int size = b&0xf;
            if(b == 0x5f) {
                b = b | (inputStream.read()<<8);
                size = (inputStream.read() <<0x18) +(inputStream.read() <<0x10) +(inputStream.read() <<0x8) + (inputStream.read());
            }else if((b&0xf0) != 0x50){
                return b;
            }
            byte[] read = new byte[size];
            inputStream.read(read);
            name = new String(read,Charset.forName("ASCII"));
            return 0x5f;
        }
        
        void readFromInputIntoFile(int b, FileInputStream inputStream, File outDir) throws IOException {
            File out = new File(outDir, name);
            
            OutputStream os = new FileOutputStream(out);
            int size = b&0xf;
            if(b == 0x4f || b == 0xDf) {
                b = b | (inputStream.read()<<8);
                size = (inputStream.read() <<0x18) +(inputStream.read() <<0x10) +(inputStream.read() <<0x8) + (inputStream.read());
            }else if((b&0xf0) != 0x40 || (b&0xf0) != 0xD0){
                return;
            }
            System.out.println("Creating file " + name + " (" + size + ")");
            while (size > 0) {
                byte[] ans = new byte[size > 0x100000 ? 0x100000 :(int)size];
                if(inputStream.read(ans) > 0) {
                    os.write(ans);
                }
                size -= 0x100000;
            }
            os.flush();
            os.close();
        }
    }
}